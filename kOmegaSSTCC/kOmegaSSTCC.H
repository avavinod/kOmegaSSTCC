/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | www.openfoam.com
     \\/     M anipulation  |
-------------------------------------------------------------------------------
    Copyright (C) 2011-2016 OpenFOAM Foundation
    Copyright (C) 2019 OpenCFD Ltd.
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::RASModels::kOmegaSSTCC

Group
    grpRASTurbulence

Description
    Implementation of the k-omega-SST turbulence model for
    incompressible and compressible flows.

    Light wrapper around base class.

    Turbulence model described in:
    \verbatim
        Menter, F. R. & Esch, T. (2001).
        Elements of Industrial Heat Transfer Prediction.
        16th Brazilian Congress of Mechanical Engineering (COBEM).
    \endverbatim

    with updated coefficients from
    \verbatim
        Menter, F. R., Kuntz, M., and Langtry, R. (2003).
        Ten Years of Industrial Experience with the SST Turbulence Model.
        Turbulence, Heat and Mass Transfer 4, ed: K. Hanjalic, Y. Nagano,
        & M. Tummers, Begell House, Inc., 625 - 632.
    \endverbatim

    but with the consistent production terms from the 2001 paper as form in the
    2003 paper is a typo, see
    \verbatim
        http://turbmodels.larc.nasa.gov/sst.html
    \endverbatim

    and the addition of the optional F3 term for rough walls from
    \verbatim
        Hellsten, A. (1998).
        "Some Improvements in Menterâ€™s k-omega-SST turbulence model"
        29th AIAA Fluid Dynamics Conference, AIAA-98-2554.
    \endverbatim

    Note that this implementation is written in terms of alpha diffusion
    coefficients rather than the more traditional sigma (alpha = 1/sigma) so
    that the blending can be applied to all coefficuients in a consistent
    manner.  The paper suggests that sigma is blended but this would not be
    consistent with the blending of the k-epsilon and k-omega models.

    Also note that the error in the last term of equation (2) relating to
    sigma has been corrected.

    Wall-functions are applied in this implementation by using equations (14)
    to specify the near-wall omega as appropriate.

    The blending functions (15) and (16) are not currently used because of the
    uncertainty in their origin, range of applicability and that if y+ becomes
    sufficiently small blending u_tau in this manner clearly becomes nonsense.

    The default model coefficients are
    \verbatim
        kOmegaSSTCoeffs
        {
            alphaK1     0.85;
            alphaK2     1.0;
            alphaOmega1 0.5;
            alphaOmega2 0.856;
            beta1       0.075;
            beta2       0.0828;
            betaStar    0.09;
            gamma1      5/9;
            gamma2      0.44;
            a1          0.31;
            b1          1.0;
            c1          10.0;
            F3          no;

            // Default CC coefficients
            cr1         1;
            cr2         2;
            cr3         1;
        }
    \endverbatim

SourceFiles
    kOmegaSSTCC.C

SeeAlso
    kOmegaSST.H

\*---------------------------------------------------------------------------*/

#ifndef kOmegaSSTCC_H
#define kOmegaSSTCC_H

#include "kOmegaSST.H"
#include "IOMRFZoneList.H"
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{
namespace RASModels
{

/*---------------------------------------------------------------------------*\
                          Class kOmegaSSTCC Declaration
\*---------------------------------------------------------------------------*/

template<class BasicTurbulenceModel>
class kOmegaSSTCC
:
    public kOmegaSST<BasicTurbulenceModel>
{
    // Private Member Functions

        //- No copy construct
        kOmegaSSTCC(const kOmegaSSTCC&) = delete;

        //- No copy assignment
        void operator=(const kOmegaSSTCC&) = delete;


protected:

// Protected data

    // Model constants

        dimensionedScalar cr1_;
        dimensionedScalar cr2_;
        dimensionedScalar cr3_;  

        //- MRF zones
        // IOMRFZoneList MRF_;
    // Fields

        // - Curvature Correction multiplier for production term
        // volScalarField prodMutliplier_;


    // Protected Member Functions

        // //- Return symmetric matrice of strain rate
        // virtual tmp<volTensorField> symmGradU
        // (
        //     const volTensorField& gradU
        // ) const;
 
        //- Return rotation rate of mesh
        virtual tmp<volVectorField> rotRateMesh() const;

    //     //- Return hodge dual matrice of rotation rate vector of mesh
    //     virtual tmp<volTensorField> hodgeDualrotRateMesh
    //     (
    //         const volVectorField& rotRate
    //     ) const;

    //    //- Return asymetric matrice of strain rate modified for mesh rotation
    //     virtual tmp<volTensorField> Omega
    //     (
    //         const volTensorField& gradU,
    //         const volTensorField& hodgeDualrotRateMesh
    //     ) const;

        // //- Return scalar square of symmGradU
        // virtual tmp<volScalarField> S2
        // (
        //     const volTensorField& symmGradU
        // ) const:

        // //- Return scalar square of Omega
        // virtual tmp<volScalarField> Omega2
        // (
        //     const volTensorField& Omega
        // ) const;

        // //- Return square root of scalar square of symmGradU
        // tmp<volScalarField> sqrtS2
        // (
        //     const volScalarField& S2
        // ) const;

        // //- Return square root of scalar square of Omega
        // tmp<volScalarField> sqrtOmega2
        // (
        //     const volTensorField& Omega2
        // ) const;

        // - Return square of strain rate
        virtual tmp<volScalarField::Internal> onebyOmegaD3
        (
            const volScalarField& S2,
            const volScalarField& sqrtOmega2
        ) const;

        // //- Return square of strain rate
        // virtual tmp<volScalarField> rStarByOnePlusrStar
        // (
        //     const volScalarField& sqrtS2,
        //     const volScalarField& sqrtOmega2
        // ) const;

        // - Return square of strain rate
        virtual tmp<volScalarField::Internal> rTilda
        (
            const volTensorField& symmGradU,
            const volTensorField& Omega,
            const volTensorField& hodgeDualrotRateMesh,
            const volScalarField::Internal& onebyOmegaD3
        ) const;

        // // - Return square of strain rate
        // virtual tmp<volScalarField> fRotation
        // (
        //     const volScalarField& rStarByOnePlusrStar,
        //     const volScalarField& rTilda
        // ) const;

        // //- Return square of strain rate
        // virtual tmp<volScalarField> fr1
        // (
        //     const volScalarField& fRotation
        // ) const;

        // //- Modified form of the k-omega SST k production rate
        // virtual tmp<volScalarField::Internal> Pk
        // (
        //     const volScalarField::Internal& G
        // ) const;


public:

    typedef typename BasicTurbulenceModel::alphaField alphaField;
    typedef typename BasicTurbulenceModel::rhoField rhoField;
    typedef typename BasicTurbulenceModel::transportModel transportModel;


    //- Runtime type information
    TypeName("kOmegaSSTCC");


    // Constructors

        //- Construct from components
        kOmegaSSTCC
        (
            const alphaField& alpha,
            const rhoField& rho,
            const volVectorField& U,
            const surfaceScalarField& alphaRhoPhi,
            const surfaceScalarField& phi,
            const transportModel& transport,
            const word& propertiesName = turbulenceModel::propertiesName,
            const word& type = typeName
        );


    //- Destructor
    virtual ~kOmegaSSTCC() = default;

    // Member Functions

        //- Re-read model coefficients if they have changed
        virtual bool read();
        
        // Dont have  any function like this
        // //- Access function transition onset momentum-thickness Reynolds number
        // const volScalarField& ReThetat() const
        // {
        //     return ReThetat_;
        // }

        // //- Access function to intermittency
        // const volScalarField& gammaInt() const
        // {
        //     return gammaInt_;
        // }

        //- Return the effective diffusivity for transition onset
        // //  momentum-thickness Reynolds number
        // tmp<volScalarField> DReThetatEff() const
        // {
        //     return tmp<volScalarField>
        //     (
        //         new volScalarField
        //         (
        //             "DReThetatEff",
        //             sigmaThetat_*(this->nut_ + this->nu())
        //         )
        //     );
        // }

        // //- Return the effective diffusivity for intermittency
        // tmp<volScalarField> DgammaIntEff() const
        // {
        //     return tmp<volScalarField>
        //     (
        //         new volScalarField
        //         (
        //             "DgammaIntEff",
        //             this->nut_ + this->nu()
        //         )
        //     );
        // }

        //- Solve the turbulence equations and correct the turbulence viscosity
        virtual void correct();
        // {
        //     if (!this->turbulence_)
        //     {
        //         return;
        //     }

        //     // Correct k and omega
        //     kOmegaSST<BasicTurbulenceModel>::correct();

        //     // Correct ReThetat and gammaInt
        //     correctReThetatGammaInt();
        // }   
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace RASModels
} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
#ifdef NoRepository
    #include "kOmegaSSTCC.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
#endif

// ************************************************************************* //
